syntax = 'proto3';
package Monopoly.Serialization.Pb;
//==================
// Request data
//==================

enum Token {
    FREE_FIELD = 0;
    DOG = 1;
    HAT = 2;
    BOOT = 3;
    CAT = 4;
    CAR = 5;
    SHIP = 6;
}

enum PlayerAction {
    END_TURN = 0;
    PAY_TAX = 1;
    BUY_PROPERTY = 2;
    BUY_BUILDING = 3;
    BUY_HOTEL = 4;
    USE_CARD = 5;
    PAY_TO_OTHER_PLAYER = 6;
    TAKE_CARD = 7;
    MORTGAGE_HOLDINGS = 8;
    START_TRADE = 9;
    START_TRADE_NEW_FIELD = 10;
    ROLL_DICE = 11;
}

enum Color {
    COL1 = 0;
    COL2 = 1;
    COL3 = 2;
    COL4 = 3;
    COL5 = 4;
    COL6 = 5;
    COL7 = 6;
    COL8 = 7;
}

message PlayerRequest {
    repeated PlayerAction availableActions = 1;
    string msg = 2;
}

message PlayerMessage {
    string msg = 1;
}

message PlayerReply {
    PlayerAction action = 1;
    //TODO: subclasses
}


//==================
// Board
//==================

//TODO: Is this a good way to handle inheritance? Read more on protobuf format.
// Does this lead to message size blowing when more types are added?

message FieldTile {

    enum TileType {
        START = 0;
        OWNABLE_TILE = 1;
        PRISON = 2;
        GOTO_PRISON = 3;
        CHANCE = 4;
        INCOME_TAX = 5;
        FREE_PARKING = 6;
    }

    message OwnableTile {

        enum OwnableType {
            RAILWAY = 0;
            STREET = 1;
            UTILITY = 2;
        }

        message Street {
            uint32 number_of_houses = 1;
            uint32 cost_per_house = 2;
        }

        OwnableType ownableType = 1;
        uint32 cost = 2;
        uint32 cost_of_parking = 3;
        Color color = 4;
        Token owner = 5;
        reserved 6; //no data for Railway
        Street street = 7; /* exists <=> [ownableType == STREET] */
        reserved 8; //no data for Utility
    }

    message IncomeTax {
        uint32 tax = 1;
    }

    TileType type = 1;
    uint32 position = 2;
    string name = 3;
    reserved 4; //no data for Start
    OwnableTile ownableTile = 5; /* exists <=> [type == OWNABLE_TILE] */
    reserved 6; //no data for Prison
    reserved 7; //no data for GotoPrison
    reserved 8; //no data for Change
    IncomeTax incomeTax = 9; /* exists <=> [type == INCOME_TAX] */
    reserved 10; //no data for FreeParking
}

message Card {
    //TODO: Subclasses
    string text = 1;
}

message PlayerData {
    string name = 1;
    Token token = 2;
    uint32 position = 3;
    uint32 money = 4; //TODO: a lot of money (64-bit??)? Negative money?
    uint32 doubleDice = 5;
    uint32 daysLeftInPrison = 6;
    uint32 numberOfRailways = 7;
    uint32 numberOfUtilities = 8;
    uint32 lastThrow = 9;
    bool prisoner = 10;
    bool alive = 11;
    repeated Card card = 12;
}

message Board {
    repeated FieldTile tiles = 1;
    repeated Card deck = 2;
    repeated PlayerData players = 3;

}